{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","renderWelcomeMsg","currentTime","Date","currentHour","getHours","splitAfternoon","splitEvening","state","date","dayPortion","setInterval","setState","Axios","get","response","console","log","data","this","className","toLocaleTimeString","navigator","language","hour","minute","toDateString","href","target","rel","onclick","getDataAxios","clockUpdate","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b56c447f.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './App.css';\r\nimport Axios from 'axios';\r\n\r\nclass App extends Component {\r\n\r\n  renderWelcomeMsg = (currentTime = new Date()) => {\r\n    const currentHour = currentTime.getHours()\r\n    const splitAfternoon = 12; // 24hr time to split the afternoon\r\n    const splitEvening = 17; // 24hr time to split the evening\r\n\r\n    if (currentHour >= splitAfternoon && currentHour <= splitEvening) {\r\n      // Between 12 PM and 5PM\r\n      return 'afternoon';\r\n    } else if (currentHour >= splitEvening) {\r\n      // Between 5PM and Midnight\r\n      return 'evening';\r\n    }\r\n    // Between dawn and noon\r\n    return 'morning';\r\n  };\r\n\r\n  // state contains current date\r\n  state = {\r\n    date: new Date(),\r\n    dayPortion: this.renderWelcomeMsg()\r\n  };\r\n\r\n  clockUpdate() { // function to update the clock time.\r\n    setInterval(() => {\r\n      this.setState({ date: new Date(), dayPortion: this.renderWelcomeMsg() }) //updates async without updating entire DOM\r\n      // this command will run indefinitely, on a 1000ms (1s) frequency.\r\n    }, 1000);\r\n  };\r\n\r\n  async getDataAxios() {\r\n    const response =\r\n      await\r\n    Axios.get(\"http://flask-inow.herokuapp.com/api/grades\") \r\n      console.log(response.data)\r\n  }\r\n\r\n  render() {\r\n    let date = this.state.date;\r\n    return (\r\n      <div className=\"App\" >\r\n        <div className=\"welcomeHeader\">\r\n          <div className=\"welcomeTime\">Good {this.state.dayPortion}, Katsuki.</div>\r\n          <div className=\"dateLabel\">{date.toLocaleTimeString(navigator.language, {\r\n            hour: '2-digit',\r\n            minute: '2-digit'\r\n          })} - {date.toDateString()}</div>\r\n        </div>\r\n        <div className=\"linksParentContainer\">\r\n          <div className=\"work linkContainer\">\r\n            <div className=\"groupHeader workHeader\">\r\n              <div className=\"headerText orangeHeader\">\r\n                Work\r\n                        </div>\r\n              <hr className=\"orangeLine\"></hr>\r\n            </div>\r\n            <ul className=\"links\">\r\n              <li><a href=\"https://classroom.google.com/u/5\" target=\"_blank\" rel=\"noopener noreferrer\">Google Classroom</a></li>\r\n              <li><a href = \"https://drive.google.com/drive/u/5/my-drive\" target = \"_blank\" rel = \"noopener noreferrer\">Google Drive</a></li>\r\n              <li><a href=\"https://sis-jeffersonco.chalkableinformationnow.com/InformationNow/Login.aspx?ReturnUrl=%2fInformationNow%2fParentPortal%2fSti.Home.UI.Web%2fStudent%2fGrades.aspx\" target=\"_blank\" rel=\"noopener noreferrer\" onclick = {this.getDataAxios}>iNow</a></li>\r\n              <li><a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a></li>\r\n              <li><a href = \"https://www.thesauraus.com/\" target = \"_blank\" rel = \"noopener noreferrer\">Thesaurus</a></li>\r\n            </ul>\r\n          </div>\r\n          <div className=\"collegeApps linkContainer\">\r\n            <div className=\"groupHeader collegeAppsHeader\">\r\n              <div className=\"headerText blueHeader\">\r\n                ForensX\r\n                        </div>\r\n              <hr className=\"blueLine\"></hr>\r\n            </div>\r\n            <ul className=\"links\">\r\n              <li><a href=\"https://forensx.io/\" target = \"_blank\" rel = \"noopener norefferer\">Team Page</a></li>\r\n              <li><a href=\"https://stackoverflow.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Stack Overflow</a></li>\r\n              <li><a href=\"https://congressionalappchallenge.us/\" target=\"_blank\" rel=\"noopener noreferrer\">Congressionals</a></li>\r\n              <li><a href=\"https://spaceappschallenge.org/\" target=\"_blank\" rel=\"noopener noreferrer\">NASA Space Apps</a></li>\r\n              <li><a href=\"spotify:playlist:1ElDbXgmaqhMWXHbAGNPSH\">Spotify</a></li>\r\n            </ul>\r\n          </div>\r\n          <div className=\"messaging linkContainer\">\r\n            <div className=\"groupHeader messagingHeader\">\r\n              <div className=\"headerText greenHeader\">\r\n                Messaging\r\n                        </div>\r\n              <hr className=\"greenLine\"></hr>\r\n            </div>\r\n            <ul className=\"links\">\r\n              <li><a href=\"discord://\" target=\"_blank\" rel=\"noopener noreferrer\">Discord</a></li>\r\n              <li><a href=\"slack://\" target=\"_blank\" rel=\"noopener noreferrer\">Slack</a></li>\r\n            </ul>\r\n          </div>\r\n          <div className=\"socialMedia linkContainer\">\r\n            <div className=\"groupHeader socialMediaHeader\">\r\n              <div className=\"headerText redHeader\">\r\n                Other Links\r\n                        </div>\r\n              <hr className=\"redLine\"></hr>\r\n            </div>\r\n            <ul className=\"links\">\r\n              <li><a href=\"https://www.reddit.com/r/twice/\" target=\"_blank\" rel=\"noopener noreferrer\">Twice</a></li>\r\n              <li><a href=\"https://www.reddit.com/r/myouimina/\" target=\"_blank\" rel=\"noopener noreferrer\">Mina</a></li>\r\n              <li><a href=\"https://steamcommunity.com/id/katsukixyz\" target=\"_blank\" rel=\"noopener noreferrer\">Steam</a></li>\r\n              <li><a href=\"https://twitch.tv/katsukixyz/\" target = \"_blank\" rel = \"noopener noreferrer\">Twitch</a></li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        {\r\n          this.clockUpdate()\r\n        }\r\n      </div >\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}